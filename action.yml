name: 'Trigger Jenkins Job and Return Result'
description: 'I am used to trigger a Jenkins job and return the success/failure of the job run'
inputs:
  jenkins-server:  # URL of the jenkins server
    description: 'URL of the Jenkins server'
    required: true
  jenkins-job: # The name of the jenkins job to run
    description: 'The name of the jenkins job to run'
    required: true
  jenkins-username: # user name for accessing jenkins
    description: 'User name for accessing Jenkins. Store this in a secret for security'
    required: true
  jenkins-pat: # personal Access token for accessing Jenkins
    description: 'Personal Access Token for accessing Jenkins. Store this in a secret for security'
    required: true
  poll-time: # how often to poll the jenkins server for results
    description: 'How often (seconds) to poll the jenkins server for results'
    required: true
    default: 10
  timeout-value: # How long to poll before timing out the action
    description: 'How long (seconds) to poll before the action times out'
    required: true
    default: 600
  verbose: # true/false - turns on verbose logging
    description: 'true/false - turns on verbose logging'
    required: false
    default: true
  parameters:
    description: 'build parameters in the format: KEY1=VALUE KEY2=VALUE'
    required: false
  file-parameters:
    description: 'file parameters in the format: FILEPARAMNAME=@FILEPATH'
    required: false
outputs:
  build-url:
    description: URL of Build triggered by action
    value: ${{ steps.trigger-jenkins-job-using-api.outputs.build_url }}
  build-number:
    description: Number of Build triggered by action
    value: ${{ steps.trigger-jenkins-job-using-api.outputs.build_number }}
  build-result:
    description: Result of Build triggered by action
    value: ${{ steps.trigger-jenkins-job-using-api.outputs.build_result }}

runs:
  using: "composite"
  steps:
    - id: trigger-jenkins-job-using-api
      run: |
        #Parameters
        urlOfJenkinsServer="${{ inputs.jenkins-server }}"
        jenkinsJobName="${{ inputs.jenkins-job }}"
        pollTime=${{ inputs.poll-time }}
        timeoutValue=${{ inputs.timeout-value }}
        verbose=${{ inputs.verbose }}
        userName=${{ inputs.jenkins-username }}
        password=${{ inputs.jenkins-pat }}
        parameters="${{ inputs.parameters }}"
        fileparameters="${{ inputs.file-parameters }}"

        BUILDCMD="build"
        PARAMARGS=""
        if [[ -n "$parameters" ]]; then
          echo "PARAMS: $PARAMARGS"
          for param in $parameters; do
            if [[ -n "$PARAMARGS" ]]; then
              PARAMARGS="${PARAMARGS}&"
            fi
            PARAMARGS="${PARAMARGS}${param}"
            echo "PARAMS: $PARAMARGS"
          done
          BUILDCMD="buildWithParameters?${PARAMARGS}"
        fi

        FILEPARAMARGS=""
        if [[ -n "$fileparameters" ]]; then
          echo "FILEPARAMS: $FILEPARAMARGS"
          for param in $fileparameters; do
            FILEPARAMARGS="${FILEPARAMARGS} -F ${param}"
            echo "FILEPARAMARGS: $FILEPARAMARGS"
          done
        fi

        startTime=$(date -u)
        startTimeSeconds=$(date -d "$startTime" +%s) 
        endTime=$(date -u -d "$startTime + $timeoutValue seconds")
        endTimeSeconds=$(date -d "$endTime" +%s)

        #STEP 1: Trigger the Jenkins Job
        #This will return a 201 if the job is created, so we need to test for this

        #Generate Crumb value
        CRUMB=`curl -s -u "$userName:$password" $urlOfJenkinsServer'/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)'`
        echo "curl -s -X POST -u \"$userName:$password\" -H \"$CRUMB\" \"$urlOfJenkinsServer\"/job/\"$jenkinsJobName/$BUILDCMD\""
        TRIGGERJOBJSON=$(curl -v -X POST -u "$userName:$password" "$PARAMARGS" -H "$CRUMB" "$urlOfJenkinsServer/job/$jenkinsJobName/$BUILDCMD" $FILEPARAMARGS 2>&1)
        
        if [[ $verbose == true ]]; then
          echo "Results of Triggering The Job:"
          echo "--------------------------------------"
          echo $TRIGGERJOBJSON
          echo "--------------------------------------"
        fi

        #STEP 2: Did STEP 1 return a 201. If so, continue, if not, stop the script
        #Regex to get the queue URL
        regex="location:\s*(http.*\/queue\/item\/([0-9]+)\/)"
        #Does the returned value contain HTTP/2 201
        if [[ "$TRIGGERJOBJSON" == *"HTTP/2 201"* ]]; then
          echo "Job triggered successfully"
          echo "--------------------------------------"
        else
          echo "HTTP/2 201 NOT FOUND. Exiting script with error"
          echo "--------------------------------------"
          exit 1
        fi

        #STEP 3: Get the queue location from TRIGGERJOBJSON
        #Get the queue URL
        
        if [[ $TRIGGERJOBJSON =~ $regex ]]; then
          echo "Queue URL Found."
          echo "--------------------------------------"
          QUEUEURL=${BASH_REMATCH[1]} ;
          if [[ $verbose == true ]]; then
            echo $QUEUEURL ; 
            echo "--------------------------------------"
          fi
        else 
          echo "Queue URL NOT FOUND. Exiting script with error"
          echo "--------------------------------------"
          exit 1 
        fi

        #STEP 4: Get the JobID and URL using the queue location
        #Sleep to ensure the job gets started. Sometimes Jenkins has a few seconds pause
        sleep 10
        BUILDJSON=$(curl -s -X GET -u "$userName:$password"   "$QUEUEURL/api/json?pretty=true")

        if [[ $verbose == true ]]; then
          echo "BUILDJSON:"
          echo "--------------------------------------"
          echo $BUILDJSON
          echo "--------------------------------------"
        fi

        #regex_blocked_status="\"blocked\"\s*:\s*([a-z]+)"
        regex="\"blocked\"\s*:\s*([a-z]+).*\"executable\".*?\"number\"\s*:\s*([0-9]+).*?\"url\"\s*:\s*\"(.*?)\""
        if [[ $BUILDJSON =~ $regex ]]; then
          if [[ $verbose == true ]]; then
            echo "blocked: " ${BASH_REMATCH[1]} ;
            echo "build number: " ${BASH_REMATCH[2]} ;
            echo "build URL: " ${BASH_REMATCH[3]} ;
          fi
          echo "Job URL retrieved"
          echo "--------------------------------------"
          BUILDNUMBER=${BASH_REMATCH[2]};
          BUILDURL=${BASH_REMATCH[3]};
          if [[ "${BASH_REMATCH[1]}" == "true" ]]; then
            echo "Build Blocked. Exiting script with error"
            echo "--------------------------------------"
            exit 1
          fi
        else
          echo "Build number/URL NOT FOUND. Exiting script with error"
          echo "--------------------------------------"
          exit 1 
        fi

        #At this point, we have the URL for the build job, so now we can query the status of the job until something happens
        echo "### Jenkins build triggered" >> $GITHUB_STEP_SUMMARY
        echo "Build Number: $BUILDNUMBER" >> $GITHUB_STEP_SUMMARY
        echo "Build Url: $BUILDURL" >> $GITHUB_STEP_SUMMARY
        echo "### Jenkins build triggered"
        echo "Build Number: $BUILDNUMBER"
        echo "Build Url: $BUILDURL"

        #STEP 5: Using the Job URL, query the job until we get some sort of code returned (success, failure, etc) and take appropriate steps
        #Potential Values: https://javadoc.jenkins-ci.org/hudson/model/Result.html
        #SUCCESS - Build had no errors
        #UNSTABLE - Build had some errors but they were not fatal
        #FAILURE - Build had a fatal error
        #NOT_BUILT - Module was not build
        #ABORTED - Manually aborted
        #Short pause
        sleep 2
        echo "Query Build Job Status"
        echo "--------------------------------------"
        JOBSTATUSJSON=$(curl -s -X GET -u "$userName:$password"   "$BUILDURL/api/json?pretty=true")
        if [[ $verbose == true ]]; then
          echo "JOBSTATUSJSON:"
          echo "--------------------------------------"
          echo $JOBSTATUSJSON
          echo "--------------------------------------"
        fi
        
        regex="\"building\"\s*:\s*([a-z]+).*?\"result\"\s*:\s*\"?([a-zA-Z]+)\"?."
        if [[ $JOBSTATUSJSON =~ $regex ]]; then
          if [[ $verbose == true ]]; then
            echo "Job Status"
            echo "building: " ${BASH_REMATCH[1]} ;
            echo "result: " ${BASH_REMATCH[2]} ;
          fi
          BUILDING=${BASH_REMATCH[1]} ;
          RESULT=${BASH_REMATCH[2]} ;
        else
          echo "Build status NOT FOUND. Exiting script with error"
          echo "--------------------------------------"
          exit 1 
        fi

        
        while [ "$BUILDING" == "true" ]
        do 
            #WAIT pollTime SECONDS
            echo "pause for $pollTime seconds"
            echo "--------------------------------------"
            sleep $pollTime
            currentTimeSeconds=$(date +%s)
            if [[ "$currentTimeSeconds" > "$endTimeSeconds" ]]; then
              echo "Timeout value reached. Exiting with error due to timeout"
              echo ":red_circle: Timed out waiting for build result" >> $GITHUB_STEP_SUMMARY
              echo "--------------------------------------"
              exit 1
            fi
            #Get the status
            echo "Query Build Job Status"
            echo "--------------------------------------"
            JOBSTATUSJSON=$(curl -s -X GET -u "$userName:$password"   "$BUILDURL/api/json?pretty=true")
            regex="\"building\"\s*:\s*([a-z]+).*?\"result\"\s*:\s*\"?([a-zA-Z]+)\"?."
            if [[ $JOBSTATUSJSON =~ $regex ]]; then
              if [[ $verbose == true ]]; then
                echo "Job Status"
                echo "building: " ${BASH_REMATCH[1]} ;
                echo "result: " ${BASH_REMATCH[2]} ;
              fi
              BUILDING=${BASH_REMATCH[1]} ;
              RESULT=${BASH_REMATCH[2]} ;
            else
                echo "Build status NOT FOUND. Exiting script with error"
                echo "--------------------------------------"
                exit 1 
            fi
        done 

        #Once I reach here, building is false, so the job isn't running any longer
        #Therefor, we can check the result
        case $RESULT in
            SUCCESS)
                echo "Build completed successfully"
                echo ":green_circle: Build completed successfully" >> $GITHUB_STEP_SUMMARY
                
                # Output details to use in next steps
                echo "build_url=$BUILDURL" >> $GITHUB_OUTPUT
                echo "build_number=$BUILDNUMBER" >> $GITHUB_OUTPUT
                echo "build_result=$RESULT" >> $GITHUB_OUTPUT

                exit 0
                ;;
            *)
                echo "Build DID NOT COMPLETE successfully"
                echo ":red_circle: Build DID NOT COMPLETE successfully" >> $GITHUB_STEP_SUMMARY
                
                # Output details to use in next steps
                echo "build_url=$BUILDURL" >> $GITHUB_OUTPUT
                echo "build_number=$BUILDNUMBER" >> $GITHUB_OUTPUT
                echo "build_result=$RESULT" >> $GITHUB_OUTPUT
                
                exit 1
                ;;
        esac
      shell: bash
branding:
  icon: 'arrow-down-circle'
  color: 'gray-dark'
